- Privilege Separation Concepts
- Implementation: Technical Controls
  - DAC: *NIX permissions and facl
  - LP: seccomp, capabilities
  - isolation: hardware assisted virtualization, chroot, namespaces, lxc

How do linux containers come about and how we can use them in different scenarioes?

Privilege Separation
--------------------
What are the two key concepts to privilege separation?

- Least Privilege (LP) : Which basically means that you only assign the minimal set of privileges that a particular process of a particular user it requires to execute or carry out its function.
- Segregation of Duties (SoD) : This means that for example if you are a financial controller and you approve financial transcations within a company you shouldn't be the same person making a purchase and then you approve it yourself there should be some segregation of duties so that you're being checked by something. 

* No single principle should have too MANY PRIVILEGES.



How do we implement privilege separation in practice? What are the technical controls we have to achieve the privilege separation?

So you might be familiar with discretionary access control (DAC).
- Discretionary Access Control (DAC): implemented in UNIX as file permission for example if I would have an executable file it would have the executable bit set on it. 
- WHY is it called DISCRETIONARY ACCESS CONTROL (DAC) because the permissions on those files are determined at the users discretion so as long as I own the file I can 
change the file permissions for the file access controls. 

How do we implement the least privilege?

- The Linux kernel is not exactly designed for security whenever you have an application that's running on a kernel you are basically exposed to all the kernel functions they are available to you. All the kernel system calls are available for you to call. 
- So a couple of different technical controls:

* seccomp: Which basically filters the number of system calls limits the number of system calls that you can make within a specific application.
* capabilities: Which attempts to explode root capability into different capabilities. So for example you know currently Linux root is all powerful capabilities aim to explode the capabilities of root to shard it and then assign only the capabilities that you need to run the application. So that's least privilege. 
- Isolation: For example if you're running a virtual machine for your lab that's hardware-assisted virtualization that is one form of isolation. 
- Containers: Which is how many ways to change for namespaces and related technologies. 

I will go through three different stories of how containers might be useful on three different scenarios and 
Once Upon a Network ....(1)
Alice runs a VERY CONTROVERSIAL website ...
Her PHP application gets POPPED 
or her MySQL server is compromised 
or her Wordpress plugin gives RCE
or {...}

She wants to add security, but now?




Resources
=========
https://docs.redhat.com/en/documentation/red_hat_enterprise_linux_atomic_host/7/html/container_security_guide/linux_capabilities_and_seccomp#linux_capabilities
https://earthly.dev/blog/intro-to-linux-capabilities/
