util-linux package 
https://www.kernel.org/pub/linux/utils/util-linux/

root@kali:~/Documents/OSCMP515# lscpu
Architecture:                    x86_64
CPU op-mode(s):                  32-bit, 64-bit
Byte Order:                      Little Endian
Address sizes:                   39 bits physical, 48 bits virtual
CPU(s):                          1
On-line CPU(s) list:             0
Thread(s) per core:              1
Core(s) per socket:              1
Socket(s):                       1
NUMA node(s):                    1
Vendor ID:                       GenuineIntel
CPU family:                      6
Model:                           165
Model name:                      Intel(R) Core(TM) i7-10700T CPU @ 2.00GHz
Stepping:                        5
CPU MHz:                         1991.997
BogoMIPS:                        3983.99
Hypervisor vendor:               KVM
Virtualization type:             full
L1d cache:                       32 KiB
L1i cache:                       32 KiB
L2 cache:                        256 KiB
L3 cache:                        16 MiB
NUMA node0 CPU(s):               0
Vulnerability L1tf:              Not affected
Vulnerability Mds:               Not affected
Vulnerability Meltdown:          Not affected
Vulnerability Spec store bypass: Vulnerable
Vulnerability Spectre v1:        Mitigation; usercopy/swapgs barriers and __user pointer sanitization
Vulnerability Spectre v2:        Mitigation; Full generic retpoline, STIBP disabled, RSB filling
Flags:                           fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 c
                                 lflush mmx fxsr sse sse2 ht syscall nx rdtscp lm constant_tsc rep_good no
                                 pl xtopology nonstop_tsc cpuid tsc_known_freq pni pclmulqdq monitor ssse3
                                  cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx rdrand hypervi
                                 sor lahf_lm abm 3dnowprefetch invpcid_single fsgsbase bmi1 avx2 bmi2 invp
                                 cid rdseed clflushopt arat md_clear flush_l1d arch_capabilities

-----
root@kali:~/Documents/OSCMP515# cat /proc/cpuinfo 
processor	: 0
vendor_id	: GenuineIntel
cpu family	: 6
model		: 165
model name	: Intel(R) Core(TM) i7-10700T CPU @ 2.00GHz
stepping	: 5
cpu MHz		: 1991.997
cache size	: 16384 KB
physical id	: 0
siblings	: 1
core id		: 0
cpu cores	: 1
apicid		: 0
initial apicid	: 0
fpu		: yes
fpu_exception	: yes
cpuid level	: 22
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx rdtscp lm constant_tsc rep_good nopl xtopology nonstop_tsc cpuid tsc_known_freq pni pclmulqdq monitor ssse3 cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx rdrand hypervisor lahf_lm abm 3dnowprefetch invpcid_single fsgsbase bmi1 avx2 bmi2 invpcid rdseed clflushopt arat md_clear flush_l1d arch_capabilities
bugs		: spectre_v1 spectre_v2 spec_store_bypass swapgs
bogomips	: 3983.99
clflush size	: 64
cache_alignment	: 64
address sizes	: 39 bits physical, 48 bits virtual
power management:


----------Memory Management----------
root@kali:~/Documents/OSCMP515# grep MemTotal /proc/meminfo 
MemTotal:        4041600 kB
root@kali:~/Documents/OSCMP515# grep VmallocTotal /proc/meminfo 
VmallocTotal:   34359738367 kB
root@kali:~/Documents/OSCMP515# grep Huge /proc/meminfo 
AnonHugePages:    428032 kB
ShmemHugePages:        0 kB
HugePages_Total:       0
HugePages_Free:        0
HugePages_Rsvd:        0
HugePages_Surp:        0
Hugepagesize:       2048 kB
Hugetlb:               0 kB
root@kali:~/Documents/OSCMP515# 

The Buddy Allocator: The basic idea of a buddy allocator is fairly simple. Physical memory is borken up into large chunks of 
memory where each chunk is a "page order" (i.e., 2^n * PAGE_SIZE). Whenever a block of memory needs to be allocated and the size 
of it is not available, one big chunk is halved continuously, until a chunk of the correct size is found. At this point, of the 
two halves, also known as "buddies", one will be use to satisfy the allocation request, and the other will remain free. At a 
later stage, if and when that memory is free'd, the two buddies (if both free) will coalesce forming a larger chunk of free memory.


---------Kernel Modules-----------
Find all kernel modules in running kernel
# find /lib/modules/$(uname -r) -type f -name '*.ko'
# lsmod

root@kali:~/Documents/OSCMP515# modprobe --show-depends ahci
insmod /lib/modules/5.2.0-kali2-amd64/kernel/drivers/scsi/scsi_mod.ko 
insmod /lib/modules/5.2.0-kali2-amd64/kernel/drivers/ata/libata.ko 
insmod /lib/modules/5.2.0-kali2-amd64/kernel/drivers/ata/libahci.ko 
insmod /lib/modules/5.2.0-kali2-amd64/kernel/drivers/ata/ahci.ko 
root@kali:~/Documents/OSCMP515# 
root@kali:~/Documents/OSCMP515# modprobe --show-depends crc16
insmod /lib/modules/5.2.0-kali2-amd64/kernel/lib/crc16.ko 


A Modern Way to Extend the Kernel: eBPF
=======================================
An increasingly popular way to extend kernel functionality is eBPF. Originally known as Berkely Packet Filter (BPF), nowadays 
the kernel project and technology os commonly known as eBPF. Technically, eBPF is a feature of the Linux kernel, and you'll
need the Linux kernel version 3.15 or above to benefit from it. It enables you to safely and efficiently extend the Linux 
kernel functions by using the bpf syscall. eBPF is implemented as an in-kernel virtual machine using a custom 64-bit 
RISC instruction set. 




References
https://hammertux.github.io/slab-allocator
https://events.static.linuxfound.org/sites/events/files/slides/slaballocators.pdf
https://elixir.bootlin.com/linux/v5.3.13/source

