https://elixir.bootlin.com/linux/v6.12.4/source/include/linux/sched.h#L778
https://elixir.bootlin.com/linux/v6.12.4/source/include/linux/sched.h#L99

Process Management
------------------
- most fundamental abstraction in a Unix/Linux system.
- An object code in execution - active, alive, running programs- Processes are more than just assembly language; they consist
  data, resoruces, state, and a virtualized computer.

  we will discuss the fundamentals of the process, from creation to termination.

- Unix took an interesting path, one seldom traveled, separating the creation of a new process from the act of loading
  a new binary image.Although the two tasks are performed in tandem much of the time, the division has allowed a great 
  deal of freedom for experimentation and evolution for each of the tasks. 
- While most operating systems offer a single system call to start up a new program, Unix requires two: a fork and an exec. 


Programs, processes, and Threads
--------------------------------
A binary is compiled, executable code lying dormant on a storage medium such as a disk. Colloquially, we may also use the 
term program; large and significant binaries we might call applications. /bin/pwd and /usr/bin/X11 are both binaries. 

A process is a running program. A process includes the binary image, loaded into memory, but also much more: an instance of 
virtualized memory, kernel resoruces such as open files, a security context such as an associated user, and one or more
threads. 
A thread is the unit of activity inside of a process. Each thread has its own virtualized processor, which includes a stack, 
processor state as resgisters, and an instruction pointer. 

In a single threaded process, the process is the thread. There is one instance of virtualized memory and one virtualized 
processor. 

In a multithreaded process, there are multiple threads. As the virtualization of memory is associated with the process, 
the threads all share the same memory address space.

The Process ID
--------------
- Each process is represented by a unique identifier, the process ID (pid). 
- The pid is guaranteed to be unique at any single point in time. 

The idle process, which is the process that the kernel "runs" when there are no other runnable processes, has the pid 0.
The first process that the kernel executes after booting the system, called the init process, has the pid 1.

Unless the user explicitly tells the kernel what process to run (through the init kernel command-line parameter), 
the kernel has to identify a suitable init process on its own - a rare example where the kernel dictates policy. 
The Linux kernel tried four executables, ih the following order:
* /sbin/init: The preferred and most likely location for the init process.
* /etc/init: Another likely location for the init process.
* /bin/init: A fallback location for the init process.
* /bin/sh: The location of the Bourne shell, which the kernel tried to run if it fails to find an init process.

The first of these processes that exists is executed as the init process. If all four processes fail to execute, 
the Linux kernel halts the system with a panic. 

After the handoff from the kernel, the init process handles the remainer of the boot process. 
Typically, this includes initializing the system, starting various services, and launching a login program.

Process ID Allocation
---------------------
By default, the kernel imposes a maximum process ID value of 32768 (2 ** 16-1). This is for compatiablity 
with older Unix systems, which used signed 16-bit types for process IDs. 
System administrators can set the value higher via /proc/sys/kernel/pid_max, treading a larger pid space for reduced 
compatibility.

The kernel allocates process IDs to processes in a stricly linear fashion. 

The Process Hierarcy
--------------------
The process that spawns a new process is known as the parent; the new process is known as the child. Every process is 
spawned from another process (exccept, of course, the init process). Therefore, every child has a parent. This 
relationship is recorded in each process's parent process ID (ppid), which is the pid of the child's parent. 

Each process is owned by a user and a group. This ownership is used to control access rights to resources. To the kernel,
users and groups are mere integer values. Through the files /etc/passwd and /etc/group, these integers are mapped to the 
human-readable names with which Unix users are familiar, such as the user root or the group wheel (generally speaking, the
Linux kernel has no interest in human-readable strings, and prefers to identify objects with integers). 
Each child process inhertis its parent's user and group ownership.

https://man7.org/linux/man-pages/man2/getpid.2.html
----processinfo.c----
#include <unistd.h>
#include <stdio.h>

int main() {
        printf("My pid=%jd\n", getpid());
        printf("My Parents's pid=%jd\n", getppid());

        return 0;
}
----------------
$gcc processinfo.c -o processinfo
$./processinfo

=================
man 2 fork
man 2 execve

Running a New Process
---------------------
- In Unix, the act of loading into memory and executing a program image is separate from the act of creating a new process.
- One system call loads a binary program into memory, replacing the previous contents of the address space, and begins 
  execution of the new program. This is called executing a new program, and the functionality is provided by the exec 
  family of calls.

- A different system call is used to create a new process, which initially is a near-duplicate of its parent process. 
- Often, the new process immediately executes a new program. The act of creating a new process is called forking, and 
  this functionality is provided by the fork() system call. 
- Two acts - first a fork to create a new process, and then an exec to load a new binary into that process - are thus 
  required to execute a new program in a new process. 
------------------
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[]) {
    for(size_t j = 0; j < argc; j++)
        printf("argv[%zu]: %s\n", j, argv[j]);
    exit(EXIT_SUCEESS);
}
------------------

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main(int argc, char **argv) {
    static char *newargv[] = { NULL, "Opertating System" , " for MSCIT", NULL };
    static char *newenviron[] = { NULL };

    if (argc != 2) {
        fprintf(stderr, "Usage: %s <file-to-execute>\n", argv[0]);
        exit(EXIt_FAILURE);
    }

    newargv[0] = argv[1];
    execve(argv[1], newargv, newenviron);
    perror("execve"); /* execve() returns only on error/*
    exit(EXIT_FAILURE);
}

$cc first.c -o first
$cc second.c - second 
$./second ./first
------------------
└─$ size first
   text    data     bss     dec     hex filename
   1460     592       8    2060     80c first
-------------------
$man 2 fork

The fork() System Call
----------------------
- The new process created by fork() is called the child process. This function is called once but returns twice. The 
  only difference in the returns is that the return value in the child is 0, whereas the return value in the parent 
  is the process ID of the new child. 
- fork() creates a new process by duplicating the calling process. The new process is referred to as the child process. 
  The calling process is referred to as the parent process.
- The child process and the parent process run in separate memory spaces. At the time of fork() both memory spaces have the 
  same content. Memory writes, file mappings (mmap(2)), and unmappings (munmap(2)) performed by one of the processes do not
  affect the other.

- The child process is an exact duplicate of the parent process except for the following points:
* The child has its  own unique process ID, and this PID does not match the ID of any existing process group (setpgid(2))
  or session.
* The child's parent process ID is the same as the parent's process ID.
* The child does not inherit its parent's memory locks (mlock(2), mlockall(2)).
* Process resource utilizations (getrusage(2)) and CPU time counters (times(2)) are reset to zero in the child.
* The child's set of pending signals is initially empty (sigpending(2)).
* The child does not inherit semaphore adjustments from its parent (semop(2)).
* The child does not inherit process-associated record locks from its parent (fcntl(2)). (On the other hand, it does 
  inherit fcntl(2) open file description locks and flock(2) locks from its parent.)
* The child does not inherit timers from its parent (setitimer(2), alarm(2), timer_create(2)).
* The child does not inherit outstanding asynchronous I/O operations from its parent (aio_read(3), aio_write(3)), nor does
  it inherit any asynchronous I/O contexts from its parent (see io_setup(2)).


SYNOPSIS
#include <unistd.h>

pid_t fork(void);

----processcreate.c----
#include <unistd.h>
#include <stdio.h>

int main() {
        pid_t pid;
        pid = fork();

        if (pid > 0 )
                printf("I am the parent of pid=%d!\n", pid);
        else if (!pid) {
                printf("I am the child!\n");
                printf("My parent process id = %d!\n", getpid());
                }
        else if (pid == -1)
                perror("fork");

        return 0;
}
-------------------------
- The reason the child's process ID is returned to the parent is that a process can have more than one child, and 
  there is no function that allows a process to obtain the process IDs of its children. The reason fork() returns 
  0 to the child is that a process can have only a single parent, and the child can always call getppid() to obtain 
  the process ID of its parent. (Process ID 0 is reserved for use by the kernel, so it's not possible for 0 to be 
  the process ID of a child.)

- Both the child and the parent continue executing with the instruction that follows the call to fork(). The child is 
  a copy of the parent. For example, the child gets a copy of the parent's data space, heap, and stack. Note that 
  this is a copy for the child; the parent and the child do not share these portions of memory. The parent and the 
  child do share the text segment, however.

- Modern implementations don't perform a complete copy of the parent's data, stack, and heap, since a fork() is often
  followed by an exec(). Instead, a technique called copy-on-write (COW) is used. These regions are shared by the
  parent and the child and have their protection changed by the kernel to read-only. If either process tries to
  modify these reasons, the kernel then makes a copy of that piece of memory only, typically a "page" in a virtual
  memory system.

---------------------
man 2 clone

/* Prototype for the glibc wrapper function */
#define _GNU_SOURCE
#include <sched.h>

int clone(int (*fn)(void *_Nullable), void *stack, int flags,
                 void *_Nullable arg, ...  /* pid_t *_Nullable parent_tid,
                                              void *_Nullable tls,
                                              pid_t *_Nullable child_tid */ );


/* For the prototype of the raw clone() system call, see NOTES */

#include <linux/sched.h>    /* Definition of struct clone_args */
#include <sched.h>          /* Definition of CLONE_* constants */
#include <sys/syscall.h>    /* Definition of SYS_* constants */
#include <unistd.h>

long syscall(SYS_clone3, struct clone_args *cl_args, size_t size);


Process Termination
--------------------
- There are eight ways for a process to terminate. Normal termination occurs in five ways:
  1. Return from main()
  2. Calling exit()
  3. Calling _exit() or _Exit()
  4. Return of the last thread from its start routine 
  5. Calling pthread_exit() from the last thread

- Abnormal termination occurs in three ways:
  6. Calling abort()
  7. Receipt of a signal 
  8. Response of the last thread to a cancellation request 

$man 2 exit

===================
Orphans and Zombies
-------------------
- The lifetimes of parent and child processes are usually not the same - either the parent outlives the child 
  or vice versa. This raises two questions:
  1. Who becomes the parent of an ORPHANED child? The orphaned child is adopted by init, the ancestor of all 
     processes, whose process ID is 1. In other words, after a child's parent terminates, a call to getppid() 
     will return the value 1. This can be used as a way to determining if a child's ture parent sill alive (
     this assumes a child that was created by a process other than init).

  2. What happens to a child that terminates before its parent has had a chance to perform a wait()? The point here 
     is that, although the child has finished its work, the parent should still be permitted to perform a wait() 
     at some later time to determine how the child terminated. The kernel deals with this situation by turning the 
     child into a ZOMBIE. This means that most of the resources held by the child are released back to the system 
     to be reused by other processes. The only part of the process that remains is an entry in the kernel's process
     table recording (among other things) the child's process ID, termination status, and resource usage statistics.

- Regarding ZOMBIES, UNIX systems imitate the movies - a zombie process can't be killed by a signal, not even the 
  (silver bullet) SIGKILL. This ensures that the parent can always eventually perform a wait().
- When the parent does perform a wait(), the kernel removes the zombie, since the last remaining information about
  the child is no longer required. On the other hand, if the parent terminates without doing a wait(), then the 
  init process adopts the child and automatically performs a wait(), thus removing the zombie process from the 
  system.
- If a parent creates a child, but fails to perform a wait(), then an entry for the zombie child will be maintained 
  indefinitely in the kernel's process table. If a large number of such zombie children are created, they will eventually 
  fill the kernel process table, preventing the creation of new processes. Since the zombies can't be killed by a 
  signal, the only way to remove them from the system is to kill their parent (or wait for it to exit), at which 
  time the zombies are adopted and waited on by init, and consequently removed from the system.
- These semantics have important implications for the design of long-lived parent processes, such as network servers
  and shells, that create numerous children. To put things another way, in such applications, a parent process should
  perform wait() calls in order to ensure that dead children are always removed from the system, rather than becoming 
  long-lived zombies. The parent may perform such wait() calls either synchronously, or asynchronously, in response 
  to delivery of the SIGCHLD signal.


