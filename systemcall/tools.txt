root@kali:~/Documents/OSCMP515# ld -V
GNU ld (GNU Binutils for Debian) 2.32.51.20190727
  Supported emulations:
   elf_x86_64
   elf32_x86_64
   elf_i386
   elf_iamcu
   elf_l1om
   elf_k1om
   i386pep
   i386pe

root@kali:~/Documents/OSCMP515# nasm -hf
usage: nasm [-@ response file] [-o outfile] [-f format] [-l listfile]
            [options...] [--] filename
    or nasm -v (or --v) for version info


Response files should contain command line parameters,
one per line.

    -t            assemble in SciTech TASM compatible mode
    -E (or -e)    preprocess only (writes output to stdout by default)
    -a            don't preprocess (assemble only)
    -M            generate Makefile dependencies on stdout
    -MG           d:o, missing files assumed generated
    -MF file      set Makefile dependency file
    -MD file      assemble and generate dependencies
    -MT file      dependency target name
    -MQ file      dependency target name (quoted)
    -MP           emit phony target

    -Zfile        redirect error messages to file
    -s            redirect error messages to stdout

    -g            generate debugging information

    -F format     select a debugging format

    -gformat      same as -g -F format

    -o outfile    write output to an outfile

    -f format     select an output format

    -l listfile   write listing to a listfile

    -Ipath        add a pathname to the include file path
    -Oflags...    optimize opcodes, immediates and branch offsets
       -O0        no optimization
       -O1        minimal optimization
       -Ox        multipass optimization (default)
       -Ov        display the number of passes executed at the end
    -Pfile        pre-include a file (also --include)
    -Dmacro[=str] pre-define a macro
    -Umacro       undefine a macro
    -Xformat      specifiy error reporting format (gnu or vc)
    -w+foo        enable warning foo (equiv. -Wfoo)
    -w-foo        disable warning foo (equiv. -Wno-foo)
    -w[+-]error[=foo]
                  promote [specific] warnings to errors
    -h            show invocation summary and exit (also --help)

   --pragma str   pre-executes a specific %pragma
   --before str   add line (usually a preprocessor statement) before the input
   --prefix str   prepend the given string to all the given string
                  to all extern, common and global symbols (also --gprefix)
   --postfix str  append the given string to all the given string
                  to all extern, common and global symbols (also --gpostfix)
   --lprefix str  prepend the given string to all other symbols
   --lpostfix str append the given string to all other symbols
   --keep-all     output files will not be removed even if an error happens
   --no-line      ignore %line directives in input
   --limit-X val  set execution limit X
                     passes          total number of passes (default unlimited)
                     stalled-passes  number of passes without forward progress (default 1000)
                     macro-levels    levels of macro expansion (default 1000000)
                     rep             %rep count (default 1000000)
                     eval            expression evaluation descent (default 1000000)
                     lines           total source lines processed (default 2000000000)

Warnings for the -W/-w options: (default in brackets)
    macro-params            macro calls with wrong parameter count [on]
    macro-selfref           cyclic macro references [off]
    macro-defaults          macros with more default than optional parameters [on]
    orphan-labels           labels alone on lines without trailing `:' [on]
    number-overflow         numeric constant does not fit [on]
    gnu-elf-extensions      using 8- or 16-bit relocation in ELF32, a GNU extension [off]
    float-overflow          floating point overflow [on]
    float-denorm            floating point denormal [off]
    float-underflow         floating point underflow [off]
    float-toolong           too many digits in floating-point number [on]
    user                    %warning directives [on]
    lock                    lock prefix on unlockable instructions [on]
    hle                     invalid hle prefixes [on]
    bnd                     invalid bnd prefixes [on]
    zext-reloc              relocation zero-extended to match output format [on]
    ptr                     non-NASM keyword used in other assemblers [on]
    bad-pragma              empty or malformed %pragma [off]
    unknown-pragma          unknown %pragma facility or directive [off]
    not-my-pragma           %pragma not applicable to this compilation [off]
    unknown-warning         unknown warning in -W/-w or warning directive [off]
    negative-rep            regative %rep count [on]
    phase                   phase error during stabilization [off]
    label-redef             label redefined to an identical value [off]
    label-redef-late        label (re)defined during code generation [error]
    other                   any warning not specifially mentioned above [on]
    all                     all possible warnings

valid output formats for -f are (`*' denotes default):
  * bin       flat-form binary files (e.g. DOS .COM, .SYS)
    ith       Intel hex
    srec      Motorola S-records
    aout      Linux a.out object files
    aoutb     NetBSD/FreeBSD a.out object files
    coff      COFF (i386) object files (e.g. DJGPP for DOS)
    elf32     ELF32 (i386) object files (e.g. Linux)
    elf64     ELF64 (x86_64) object files (e.g. Linux)
    elfx32    ELFX32 (x86_64) object files (e.g. Linux)
    as86      Linux as86 (bin86 version 0.3) object files
    obj       MS-DOS 16-bit/32-bit OMF object files
    win32     Microsoft Win32 (i386) object files
    win64     Microsoft Win64 (x86-64) object files
    rdf       Relocatable Dynamic Object File Format v2.0
    ieee      IEEE-695 (LADsoft variant) object file format
    macho32   NeXTstep/OpenStep/Rhapsody/Darwin/MacOS X (i386) object files
    macho64   NeXTstep/OpenStep/Rhapsody/Darwin/MacOS X (x86_64) object files
    dbg       Trace of all info passed to output stage
    elf       ELF (short name for ELF32)
    macho     MACHO (short name for MACHO32)
    win       WIN (short name for WIN32)
===============================================
root@kali:~/Documents/OSCMP515# cat /usr/include/x86_64-linux-gnu/asm/
a.out.h            ioctl.h            param.h            setup.h            termios.h
auxvec.h           ioctls.h           perf_regs.h        shmbuf.h           types.h
bitsperlong.h      ipcbuf.h           poll.h             sigcontext32.h     ucontext.h
boot.h             ist.h              posix_types_32.h   sigcontext.h       unistd_32.h
bootparam.h        kvm.h              posix_types_64.h   siginfo.h          unistd_64.h
bpf_perf_event.h   kvm_para.h         posix_types.h      signal.h           unistd.h
byteorder.h        kvm_perf.h         posix_types_x32.h  socket.h           unistd_x32.h
debugreg.h         ldt.h              prctl.h            sockios.h          vm86.h
e820.h             mce.h              processor-flags.h  statfs.h           vmx.h
errno.h            mman.h             ptrace-abi.h       stat.h             vsyscall.h
fcntl.h            msgbuf.h           ptrace.h           svm.h              
hw_breakpoint.h    msr.h              resource.h         swab.h             
hwcap2.h           mtrr.h             sembuf.h           termbits.h         
root@kali:~/Documents/OSCMP515# cat /usr/include/x86_64-linux-gnu/asm/


===============================================
root@kali:~/Documents/OSCMP515# cat hello-32.asm 
; helloworld.asm
; 

global _start

; TEXT SECTION
section .text

; Identify the where the program entry point
_start:

    ; print the message
    mov eax, 0x4
    mov ebx, 0x1
    mov ecx, message
    mov edx, 0x0d
    int 0x80		  

    ; exit successfully

    mov eax, 0x1
    mov ebx, 0x5
    int 0x80

; Data Section
section .data
    message: db "Welcome to OS!"
================================================
root@kali:~/Documents/OSCMP515# ls
hello-32.asm
root@kali:~/Documents/OSCMP515# nasm -f elf32 -o hello-32.o hello-32.asm 
root@kali:~/Documents/OSCMP515# ls
hello-32.asm  hello-32.o
root@kali:~/Documents/OSCMP515# ld -m elf_i386 hello-32.o -o hello-32
root@kali:~/Documents/OSCMP515# ls
hello-32  hello-32.asm  hello-32.o
root@kali:~/Documents/OSCMP515# 

root@kali:~/Documents/OSCMP515# ./hello-32 
Welcome to OSroot@kali:~/Documents/OSCMP515# file hello-32
hello-32: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, not stripped
root@kali:~/Documents/OSCMP515#
=========Static and dynamic binaries========
root@kali:~/Documents/OSCMP515# ls
hello-32  hello-32.asm  hello-32.o
root@kali:~/Documents/OSCMP515# ldd hello-32
	not a dynamic executable
root@kali:~/Documents/OSCMP515# ldd /bin/ls
	linux-vdso.so.1 (0x00007fff477af000)
	libselinux.so.1 => /lib/x86_64-linux-gnu/libselinux.so.1 (0x00007f70d4d26000)
	libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f70d4b65000)
	libpcre2-8.so.0 => /lib/x86_64-linux-gnu/libpcre2-8.so.0 (0x00007f70d4ae0000)
	libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f70d4adb000)
	/lib64/ld-linux-x86-64.so.2 (0x00007f70d4d99000)
	libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f70d4aba000)
root@kali:~/Documents/OSCMP515#
================ 64-bit program ============
root@kali:~/Documents/OSCMP515# cat test.S 
.data 

msg:
    .ascii "Welcome to Operating System!\n"
    len = . - msg

.text 

    .global _start

_start:
    movq $1, %rax
    movq $1, %rdi
    movq $msg, %rsi
    movq $len, %rdx
    syscall

    movq $60, %rax
    xorq %rdi, %rdi
    syscall

===================================================
We can compile the above assembly program with the following commands:
root@kali:~/Documents/OSCMP515# ls
hello-32  hello-32.asm  hello-32.o  test.S
root@kali:~/Documents/OSCMP515# gcc -c test.S 
root@kali:~/Documents/OSCMP515# ls
hello-32  hello-32.asm  hello-32.o  test.o  test.S
root@kali:~/Documents/OSCMP515# ld -o test test.o
root@kali:~/Documents/OSCMP515# ls
hello-32  hello-32.asm  hello-32.o  test  test.o  test.S
root@kali:~/Documents/OSCMP515# file test
test: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, not stripped
root@kali:~/Documents/OSCMP515# ./test
Welcome to Operating System!
root@kali:~/Documents/OSCMP515#
