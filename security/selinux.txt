[SELinux by Example]

Using Security Enhanced Linux
Frank Mayer, Karl MacMillan, David Caplan

[Preface]


[Part I]
- Overview of mandatory access control (MAC)
- Type enforcement concepts and applications
- SELinux architecture and mechanisms 

[Part II]
- Details of the SELinux native policy language syntax and semantics 
- Object labeling in SELinux 

[Part III]
- Two primary methods developed to build SELinux policies: the example policy and the reference policy
- Impacts of SELinux on system administration 
- How to write policy modules for SELinux

[Chapter 1. Background]

Security Enhanced Linux (SELinux) is an exciting new technology for securing our computer networks and systems. In a real sense, it represents the culmination of nearly 40 years of operating system security research. For the first time, we have a powerful, flexible, mandatory access control mechanism incorporated into a mainstream, widely distributed in operating system. In this chapter, we provide a brief overview of the history of secure operating system research as a means to motivate and set into perspective the value that SELinux brings to today's computer security challenges. 

[[1.1 The Inevitability of Software Failure]]

Appropriately enough, we derive the title of this first section of a book on SELinux from a paper that the principle creators of SELinux coauthored before the SELinux project was even started. The authors of that paper pointed out that software is flawed, and that too much of the software being developed assumes that applications can enforce security without the support of the underlying operating systems. As they note:

" The necessity of operating system security to overall system security is undeniable... If it fails to meet this responsibility, system-wide vulnerabiliites will result. A design that tries to create security without the support of the underlying operating system is a "fortress built upon sand" with no secure foundation upon which to sit. 
In the years since that paper was published in 1998, the problem of flawed application software has become practically an everyday news headline. Rarely does a week go by that some new virus, computer theft, or system vulnerability is not announced. The fact of life in the computer era is that application software is flawed and will remain flawed. We certainly applaud the efforts to make software better and more reliable, but flaws will undoubtedly remain an ongoing problem for the foreseeable future. Some people will always try to exploit these flaws. Our challenge as a community is to find ways to have secure systems knowing that flawed application software will always exists. We cannot meet this challenge successfully without first finding firm ground upon which to build (that is, the operating system).

Thus we find the goal of SELinux: specifically, to promulgate a better form of operating system security. As we discuss in this book, the state of the art in operating system security is inadequate. We as a computer security community have known this for nearly 40 years. We have conducted much research but have had limited success improving this situation for mainstream operating systems. Finally, with SELinux, we believe real progress has been made in a way that we will prove lasting. SELinux is indeed a SECURITY ENHANCEMENT to the Linux operating system. This enhancement can effectively mitigate the problem of flawed applicaiton software, including those flaws not yet discovered or created. This same enhancement can also enforce many security goals, ranging from data confidentiality to application integrity to improve robustness. 

With SELinux, we have made a great stride toward moving our "fortress" off the shifting sands on which it currently sits. 

[[1.2 The Evolution of Access Control Security in Operating Systems]]

Early operating systems had little or no security; a user could access any file or resource just by knowing how to name the resource. Fortunately, it was not long before access control mechanisms began to emerge to provide some sense of security. 
