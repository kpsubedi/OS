[SELinux by Example]

Using Security Enhanced Linux
Frank Mayer, Karl MacMillan, David Caplan

[Preface]


[Part I]
- Overview of mandatory access control (MAC)
- Type enforcement concepts and applications
- SELinux architecture and mechanisms 

[Part II]
- Details of the SELinux native policy language syntax and semantics 
- Object labeling in SELinux 

[Part III]
- Two primary methods developed to build SELinux policies: the example policy and the reference policy
- Impacts of SELinux on system administration 
- How to write policy modules for SELinux

[Chapter 1. Background]

Security Enhanced Linux (SELinux) is an exciting new technology for securing our computer networks and systems. In a real sense, it represents the culmination of nearly 40 years of operating system security research. For the first time, we have a powerful, flexible, mandatory access control mechanism incorporated into a mainstream, widely distributed in operating system. In this chapter, we provide a brief overview of the history of secure operating system research as a means to motivate and set into perspective the value that SELinux brings to today's computer security challenges. 

[[1.1 The Inevitability of Software Failure]]

Appropriately enough, we derive the title of this first section of a book on SELinux from a paper that the principle creators of SELinux coauthored before the SELinux project was even started. The authors of that paper pointed out that software is flawed, and that too much of the software being developed assumes that applications can enforce security without the support of the underlying operating systems. As they note:

" The necessity of operating system security to overall system security is undeniable... If it fails to meet this responsibility, system-wide vulnerabiliites will result. A design that tries to create security without the support of the underlying operating system is a "fortress built upon sand" with no secure foundation upon which to sit. 
In the years since that paper was published in 1998, the problem of flawed application software has become practically an everyday news headline. 

